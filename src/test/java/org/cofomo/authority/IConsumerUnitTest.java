package org.cofomo.authority;

import static org.mockito.Mockito.when;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.documentationConfiguration;
import static org.springframework.restdocs.operation.preprocess.Preprocessors.preprocessRequest;
import static org.springframework.restdocs.operation.preprocess.Preprocessors.preprocessResponse;
import static org.springframework.restdocs.operation.preprocess.Preprocessors.prettyPrint;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.payload.PayloadDocumentation.relaxedRequestFields;
import static org.springframework.restdocs.payload.PayloadDocumentation.relaxedResponseFields;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;

import org.cofomo.authority.controller.ConsumerController;
import org.cofomo.authority.facade.ConsumerFacade;
import org.cofomo.commons.domain.identity.Consumer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.restdocs.RestDocumentationContextProvider;
import org.springframework.restdocs.RestDocumentationExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith({ RestDocumentationExtension.class, SpringExtension.class })
@WebMvcTest(ConsumerController.class)
@AutoConfigureRestDocs(outputDir = "target/generated-snippets")
public class IConsumerUnitTest {

	@Autowired
	private MockMvc mockMvc;

	@Autowired
	private ObjectMapper objectMapper;

	@MockBean
	private ConsumerFacade facade;
	
	@BeforeEach
	public void setUp(WebApplicationContext webApplicationContext, RestDocumentationContextProvider restDocumentation) {

		this.mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)
				.apply(documentationConfiguration(restDocumentation).uris().withScheme("https")
						.withHost("consumer.cofomo.io/api").withPort(443))
				.alwaysDo(
						document("{method-name}", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint())))
				.build();
	}

	@Test
	public void shouldReturnAllConsumers() throws Exception {

		// create list of consumers
		List<Consumer> consumerList = new ArrayList<Consumer>();
		consumerList.add(createConsumer1());
		consumerList.add(createConsumer2());

		// define mock return value
		when(facade.getAll()).thenReturn(consumerList);

		// action
		this.mockMvc.perform(get("/v1/consumer")).andDo(print()).andExpect(status().isOk())
				.andDo(document("consumer-get-all", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint())));
	}

	@Test
	public void shouldReturnOneConsumer() throws Exception {

		// create consumer
		Consumer consumer = createConsumer1();

		// define mock return value
		when(facade.getById("1")).thenReturn(consumer);
		
		// action
		this.mockMvc.perform(get("/v1/consumer/1").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andDo(document("consumer-get-by-id", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint()),
						relaxedResponseFields(fieldWithPath("id").description("Autogenerated UUID of the consumer").type("String"),
								fieldWithPath("username").description("Username of the consumer").type("String"),
								fieldWithPath("password").description("Password of the consumer").type("String"))))
				.andDo(print());
	}

	@Test
	public void shouldCreateConsumer() throws Exception {

		// create consumer
		Consumer consumer = createConsumer1();

		// define mock return value
		when(facade.create(consumer)).thenReturn(consumer);

		// action
		MvcResult result = this.mockMvc
				.perform(post("/v1/consumer").content(objectMapper.writeValueAsString(consumer))
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isCreated())
				.andDo(document("consumer-create-consumer", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint()),
						relaxedRequestFields(fieldWithPath("id").description("Autogenerated UUID of the consumer").type("String"),
								fieldWithPath("username").description("Username of the consumer").type("String"),
								fieldWithPath("password").description("Password of the consumer").type("String"))))
				.andDo(print())
				.andReturn();
	}

	@Test
	public void shouldUpdateOneConsumer() throws Exception {

		// create consumer
		Consumer consumer = createConsumer1();

		// action
		this.mockMvc
				.perform(put("/v1/consumer/1").content(objectMapper.writeValueAsString(consumer))
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isAccepted())
				.andDo(document("consumer-update-consumer", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint()),
						relaxedRequestFields(fieldWithPath("id").description("Autogenerated UUID of the consumer").type("String"),
								fieldWithPath("username").description("Username of the consumer").type("String"),
								fieldWithPath("password").description("Password of the consumer").type("String"))))
				.andDo(print());
	}
	
	@Test
	public void shouldDeleteOneConsumer() throws Exception {

		// create consumer
		Consumer consumer = createConsumer1();

		// action
		this.mockMvc
				.perform(delete("/v1/consumer/1").content(objectMapper.writeValueAsString(consumer))
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andDo(document("consumer-delete-consumer", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint())))
				.andDo(print());
	}

	// helper functions
	private static Consumer createConsumer1() {
		return new Consumer("1", "alice", "alice.123");
	}
	
	private static Consumer createConsumer2() {
		return new Consumer("2", "bob", "bob.123");
	}

}
